{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUniqueId = exports.mergeTransactions = exports.AddressLiteral = exports.Address = void 0;\n/**\n * @category Utils\n */\n\nclass Address {\n  constructor(address) {\n    this.equals = other => this._equals(other);\n\n    this._address = address;\n  }\n\n  toString() {\n    return this._address;\n  }\n\n  _equals(other) {\n    if (other instanceof Address) {\n      return this._address == other._address;\n    } else {\n      return this._address == other;\n    }\n  }\n\n}\n\nexports.Address = Address;\n/**\n * @category Utils\n */\n\nclass AddressLiteral extends Address {\n  constructor(address) {\n    super(address);\n  }\n\n}\n\nexports.AddressLiteral = AddressLiteral;\n/**\n * Modifies knownTransactions array, merging it with new transactions.\n * All arrays are assumed to be sorted by descending logical time.\n *\n * > Note! This method does not remove duplicates.\n *\n * @param knownTransactions\n * @param newTransactions\n * @param info\n *\n * @category Utils\n */\n\nfunction mergeTransactions(knownTransactions, newTransactions, info) {\n  if (info.batchType == 'old') {\n    knownTransactions.push(...newTransactions);\n    return knownTransactions;\n  }\n\n  if (knownTransactions.length === 0) {\n    knownTransactions.push(...newTransactions);\n    return knownTransactions;\n  } // Example:\n  // known lts: [N, N-1, N-2, N-3, (!) N-10,...]\n  // new lts: [N-4, N-5]\n  // batch info: { minLt: N-5, maxLt: N-4, batchType: 'new' }\n  // 1. Skip indices until known transaction lt is greater than the biggest in the batch\n\n\n  let i = 0;\n\n  while (i < knownTransactions.length && knownTransactions[i].id.lt.localeCompare(info.maxLt) >= 0) {\n    ++i;\n  } // 2. Insert new transactions\n\n\n  knownTransactions.splice(i, 0, ...newTransactions);\n  return knownTransactions;\n}\n\nexports.mergeTransactions = mergeTransactions;\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\n\nfunction getUniqueId() {\n  idCounter = (idCounter + 1) % MAX;\n  return idCounter;\n}\n\nexports.getUniqueId = getUniqueId;","map":{"version":3,"names":["Object","defineProperty","exports","value","getUniqueId","mergeTransactions","AddressLiteral","Address","constructor","address","equals","other","_equals","_address","toString","knownTransactions","newTransactions","info","batchType","push","length","i","id","lt","localeCompare","maxLt","splice","MAX","idCounter","Math","floor","random"],"sources":["/Users/romanrakhlin/Dropbox/Mac/Desktop/cross-chain-reputation/client/node_modules/everscale-inpage-provider/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUniqueId = exports.mergeTransactions = exports.AddressLiteral = exports.Address = void 0;\n/**\n * @category Utils\n */\nclass Address {\n    constructor(address) {\n        this.equals = (other) => this._equals(other);\n        this._address = address;\n    }\n    toString() {\n        return this._address;\n    }\n    _equals(other) {\n        if (other instanceof Address) {\n            return this._address == other._address;\n        }\n        else {\n            return this._address == other;\n        }\n    }\n}\nexports.Address = Address;\n/**\n * @category Utils\n */\nclass AddressLiteral extends Address {\n    constructor(address) {\n        super(address);\n    }\n}\nexports.AddressLiteral = AddressLiteral;\n/**\n * Modifies knownTransactions array, merging it with new transactions.\n * All arrays are assumed to be sorted by descending logical time.\n *\n * > Note! This method does not remove duplicates.\n *\n * @param knownTransactions\n * @param newTransactions\n * @param info\n *\n * @category Utils\n */\nfunction mergeTransactions(knownTransactions, newTransactions, info) {\n    if (info.batchType == 'old') {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    if (knownTransactions.length === 0) {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    // Example:\n    // known lts: [N, N-1, N-2, N-3, (!) N-10,...]\n    // new lts: [N-4, N-5]\n    // batch info: { minLt: N-5, maxLt: N-4, batchType: 'new' }\n    // 1. Skip indices until known transaction lt is greater than the biggest in the batch\n    let i = 0;\n    while (i < knownTransactions.length &&\n        knownTransactions[i].id.lt.localeCompare(info.maxLt) >= 0) {\n        ++i;\n    }\n    // 2. Insert new transactions\n    knownTransactions.splice(i, 0, ...newTransactions);\n    return knownTransactions;\n}\nexports.mergeTransactions = mergeTransactions;\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,iBAAR,GAA4BH,OAAO,CAACI,cAAR,GAAyBJ,OAAO,CAACK,OAAR,GAAkB,KAAK,CAAlG;AACA;AACA;AACA;;AACA,MAAMA,OAAN,CAAc;EACVC,WAAW,CAACC,OAAD,EAAU;IACjB,KAAKC,MAAL,GAAeC,KAAD,IAAW,KAAKC,OAAL,CAAaD,KAAb,CAAzB;;IACA,KAAKE,QAAL,GAAgBJ,OAAhB;EACH;;EACDK,QAAQ,GAAG;IACP,OAAO,KAAKD,QAAZ;EACH;;EACDD,OAAO,CAACD,KAAD,EAAQ;IACX,IAAIA,KAAK,YAAYJ,OAArB,EAA8B;MAC1B,OAAO,KAAKM,QAAL,IAAiBF,KAAK,CAACE,QAA9B;IACH,CAFD,MAGK;MACD,OAAO,KAAKA,QAAL,IAAiBF,KAAxB;IACH;EACJ;;AAfS;;AAiBdT,OAAO,CAACK,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;;AACA,MAAMD,cAAN,SAA6BC,OAA7B,CAAqC;EACjCC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAMA,OAAN;EACH;;AAHgC;;AAKrCP,OAAO,CAACI,cAAR,GAAyBA,cAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,iBAAT,CAA2BU,iBAA3B,EAA8CC,eAA9C,EAA+DC,IAA/D,EAAqE;EACjE,IAAIA,IAAI,CAACC,SAAL,IAAkB,KAAtB,EAA6B;IACzBH,iBAAiB,CAACI,IAAlB,CAAuB,GAAGH,eAA1B;IACA,OAAOD,iBAAP;EACH;;EACD,IAAIA,iBAAiB,CAACK,MAAlB,KAA6B,CAAjC,EAAoC;IAChCL,iBAAiB,CAACI,IAAlB,CAAuB,GAAGH,eAA1B;IACA,OAAOD,iBAAP;EACH,CARgE,CASjE;EACA;EACA;EACA;EACA;;;EACA,IAAIM,CAAC,GAAG,CAAR;;EACA,OAAOA,CAAC,GAAGN,iBAAiB,CAACK,MAAtB,IACHL,iBAAiB,CAACM,CAAD,CAAjB,CAAqBC,EAArB,CAAwBC,EAAxB,CAA2BC,aAA3B,CAAyCP,IAAI,CAACQ,KAA9C,KAAwD,CAD5D,EAC+D;IAC3D,EAAEJ,CAAF;EACH,CAlBgE,CAmBjE;;;EACAN,iBAAiB,CAACW,MAAlB,CAAyBL,CAAzB,EAA4B,CAA5B,EAA+B,GAAGL,eAAlC;EACA,OAAOD,iBAAP;AACH;;AACDb,OAAO,CAACG,iBAAR,GAA4BA,iBAA5B;AACA,MAAMsB,GAAG,GAAG,UAAZ;AACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,GAA3B,CAAhB;;AACA,SAASvB,WAAT,GAAuB;EACnBwB,SAAS,GAAG,CAACA,SAAS,GAAG,CAAb,IAAkBD,GAA9B;EACA,OAAOC,SAAP;AACH;;AACD1B,OAAO,CAACE,WAAR,GAAsBA,WAAtB"},"metadata":{},"sourceType":"script"}